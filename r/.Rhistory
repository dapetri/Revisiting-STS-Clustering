sprintf('Reduced sampling size for whole clustering:  %s',reduced_sampling)
sprintf('PCA:                                         %s',dim_red)
sprintf('Unified hyperparameters:                     %s',unify)
plot(1:length(target_ts),target_ts, type = 'l')
title("Target time series")
plot(1:length(opposing_ts),opposing_ts,type = 'l')
title("Opposing time series")
print("")
print("Results:")
l_ks <- length(ks)
l_ws <- length(ws)
meaningfulness_table <- matrix(0, nrow = (l_ks*l_ws), ncol = 4)
meaningfulness_plot <- matrix(0, nrow=length(ws), ncol = (length(ks)*2))
source("random_walk.R")
source("meaningfulness_calculations.R")
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(target_ts,opposing_ts,n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- round(m, 2)
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
df_meaningfulness <- data.frame(w=meaningfulness_table[,1],
k=meaningfulness_table[,2],
sts=meaningfulness_table[,3],
whole=meaningfulness_table[,4])
df_meaningfulness
for (i in 1:length(ws)) {
df_meaningfulness_plot <- data.frame(meaningfulness=meaningfulness_plot[i,],
k=rep(c("3","5","7","11"),each=2),
algorithm=c("sts","whole"))
str <- paste("w =",ws[w])
print(ggplot(df_meaningfulness_plot,
aes(x = k,
y = meaningfulness,
fill = algorithm)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(title = str))
Sys.sleep(1)
}
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 100
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[3]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[1]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
print('Experiment settings:')
print('')
sprintf("n:                                           %d",n)
sprintf('r:                                           %d',r)
sprintf('Normalizer:                                  %s',norm_method)
sprintf('Distance metric:                             %s',dist_metric)
sprintf('Clustering algorithm:                        %s',cluster_algo)
sprintf('Reduced sampling size for whole clustering:  %s',reduced_sampling)
sprintf('PCA:                                         %s',dim_red)
sprintf('Unified hyperparameters:                     %s',unify)
plot(1:length(target_ts),target_ts, type = 'l')
title("Target time series")
plot(1:length(opposing_ts),opposing_ts,type = 'l')
title("Opposing time series")
print("")
print("Results:")
l_ks <- length(ks)
l_ws <- length(ws)
meaningfulness_table <- matrix(0, nrow = (l_ks*l_ws), ncol = 4)
meaningfulness_plot <- matrix(0, nrow=length(ws), ncol = (length(ks)*2))
source("random_walk.R")
source("meaningfulness_calculations.R")
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(target_ts,opposing_ts,n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- round(m, 2)
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
df_meaningfulness <- data.frame(w=meaningfulness_table[,1],
k=meaningfulness_table[,2],
sts=meaningfulness_table[,3],
whole=meaningfulness_table[,4])
df_meaningfulness
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 100
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[3]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[1]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
print('Experiment settings:')
print('')
sprintf("n:                                           %d",n)
sprintf('r:                                           %d',r)
sprintf('Normalizer:                                  %s',norm_method)
sprintf('Distance metric:                             %s',dist_metric)
sprintf('Clustering algorithm:                        %s',cluster_algo)
sprintf('Reduced sampling size for whole clustering:  %s',reduced_sampling)
sprintf('PCA:                                         %s',dim_red)
sprintf('Unified hyperparameters:                     %s',unify)
plot(1:length(target_ts),target_ts, type = 'l')
title("Target time series")
plot(1:length(opposing_ts),opposing_ts,type = 'l')
title("Opposing time series")
print("")
print("Results:")
l_ks <- length(ks)
l_ws <- length(ws)
meaningfulness_table <- matrix(0, nrow = (l_ks*l_ws), ncol = 4)
meaningfulness_plot <- matrix(0, nrow=length(ws), ncol = (length(ks)*2))
source("random_walk.R")
source("meaningfulness_calculations.R")
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(target_ts,opposing_ts,n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- round(m, 2)
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
df_meaningfulness <- data.frame(w=meaningfulness_table[,1],
k=meaningfulness_table[,2],
sts=meaningfulness_table[,3],
whole=meaningfulness_table[,4])
df_meaningfulness
for (i in 1:length(ws)) {
df_meaningfulness_plot <- data.frame(meaningfulness=meaningfulness_plot[i,],
k=rep(c("3","5","7","11"),each=2),
algorithm=c("sts","whole"))
str <- paste("w =",ws[w])
print(ggplot(df_meaningfulness_plot,
aes(x = k,
y = meaningfulness,
fill = algorithm)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(title = str))
Sys.sleep(1)
}
source("random_walk.R")
source("meaningfulness_calculations.R")
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(target_ts,opposing_ts,n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- round(m, 2)
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
source("random_walk.R")
source("meaningfulness_calculations.R")
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(target_ts,opposing_ts,n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- round(m, 2)
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
df_meaningfulness <- data.frame(w=meaningfulness_table[,1],
k=meaningfulness_table[,2],
sts=meaningfulness_table[,3],
whole=meaningfulness_table[,4])
df_meaningfulness
for (i in 1:length(ws)) {
df_meaningfulness_plot <- data.frame(meaningfulness=meaningfulness_plot[i,],
k=rep(c("3","5","7","11"),each=2),
algorithm=c("sts","whole"))
str <- paste("w =",ws[w])
print(ggplot(df_meaningfulness_plot,
aes(x = k,
y = meaningfulness,
fill = algorithm)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(title = str))
Sys.sleep(1)
}
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(spx, create_random_walk(spx, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
print(paste('Calculated: spx_short',m))
m_ <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: min_daily_temp',m_))
m_ <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: dax_alltime',m_))
m_ <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: bitcoin_alltime',m_))
m_ <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: hydraulic',m_))
#m_ <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#m <- m + m_
#print(paste('Calculated: air_quality',m_))
m <- round(m/5, 2)
print(paste('Final',m))
print('')
print('')
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[3]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[1]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(spx, create_random_walk(spx, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
print(paste('Calculated: spx_short',m))
m_ <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: min_daily_temp',m_))
m_ <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: dax_alltime',m_))
m_ <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: bitcoin_alltime',m_))
m_ <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: hydraulic',m_))
#m_ <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#m <- m + m_
#print(paste('Calculated: air_quality',m_))
m <- round(m/5, 2)
print(paste('Final',m))
print('')
print('')
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
df_meaningfulness <- data.frame(w=meaningfulness_table[,1],
k=meaningfulness_table[,2],
sts=meaningfulness_table[,3],
whole=meaningfulness_table[,4])
df_meaningfulness
for (i in 1:length(ws)) {
df_meaningfulness_plot <- data.frame(meaningfulness=meaningfulness_plot[i,],
k=rep(c("3","5","7","11"),each=2),
algorithm=c("sts","whole"))
str = paste("w =",ws[w])
print(ggplot(df_meaningfulness_plot,
aes(x = k,
y = meaningfulness,
fill = algorithm)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(title = str))
Sys.sleep(1)
}
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 10
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[3]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[1]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(spx, create_random_walk(spx, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
print(paste('Calculated: spx_short',m))
m_ <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: min_daily_temp',m_))
m_ <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: dax_alltime',m_))
m_ <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: bitcoin_alltime',m_))
m_ <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- m + m_
print(paste('Calculated: hydraulic',m_))
#m_ <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#m <- m + m_
#print(paste('Calculated: air_quality',m_))
m <- round(m/5, 2)
print(paste('Final',m))
print('')
print('')
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}
df_meaningfulness <- data.frame(w=meaningfulness_table[,1],
k=meaningfulness_table[,2],
sts=meaningfulness_table[,3],
whole=meaningfulness_table[,4])
df_meaningfulness
for (i in 1:length(ws)) {
df_meaningfulness_plot <- data.frame(meaningfulness=meaningfulness_plot[i,],
k=rep(c("3","5","7","11"),each=2),
algorithm=c("sts","whole"))
str = paste("w =",ws[w])
print(ggplot(df_meaningfulness_plot,
aes(x = k,
y = meaningfulness,
fill = algorithm)) +
geom_bar(stat = "identity",
position = "dodge") +
labs(title = str))
Sys.sleep(1)
}
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- FALSE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[1]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
print('Experiment settings:')
print('')
sprintf("n:                                           %d",n)
sprintf('r:                                           %d',r)
sprintf('Normalizer:                                  %s',norm_method)
sprintf('Distance metric:                             %s',dist_metric)
sprintf('Clustering algorithm:                        %s',cluster_algo)
sprintf('Reduced sampling size for whole clustering:  %s',reduced_sampling)
sprintf('PCA:                                         %s',dim_red)
sprintf('Unified hyperparameters:                     %s',unify)
plot(1:length(target_ts),target_ts, type = 'l')
title("Target time series")
plot(1:length(opposing_ts),opposing_ts,type = 'l')
title("Opposing time series")
print("")
print("Results:")
l_ks <- length(ks)
l_ws <- length(ws)
meaningfulness_table <- matrix(0, nrow = (l_ks*l_ws), ncol = 4)
meaningfulness_plot <- matrix(0, nrow=length(ws), ncol = (length(ks)*2))
source("random_walk.R")
source("meaningfulness_calculations.R")
i <- 1
j <- 1
for (w in 1:length(ws)) {
j <- 1
for (k in 1:length(ks)) {
m <- calculate_meaningfulness(target_ts,opposing_ts,n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m <- round(m, 2)
meaningfulness_table[i,] <- c(ws[w],ks[k],m[1],m[2])
meaningfulness_plot[w,j] <- m[1]
meaningfulness_plot[w,(j+1)] <- m[2]
i <- i+1
j <- j+2
}
}

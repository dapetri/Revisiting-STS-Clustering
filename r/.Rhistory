source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,6,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- FALSE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- FALSE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:100], create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:105], create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:105], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:104], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:103], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:102], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
print(air_quality[102])
print(air_quality[103])
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:102], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:103], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:103], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:103], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:102], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
print(air_quality[102:103])
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:102], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:103], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[1:103], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
view(air_quality)
View(air_quality)
meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality[104:150], create_random_walk(air_quality[1:1000], seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
em_i <- m_i + 1
}
}
boxplot(meaningfulness[,,1])
boxplot(t(meaningfulness[,,1])
boxplot(t(meaningfulness[,,1]))
boxplot(t(meaningfulness[,,1]))
print(meaningfulness)
m_i <- m_i + 1
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
boxplot(t(meaningfulness[,,1]))
boxplot(t(meaningfulness[,,2]))
boxplot(t(meaningfulness[,,1]))
boxplot(t(meaningfulness[,,1]), col='white')
names <- c('w=8, k=3','w=8, k=5','w=8, k=7','w=8, k=11','w=16, k=3','w=16, k=5','w=16, k=7','w=16, k=11','w=32, k=3','w=32, k=5','w=32, k=7','w=32, k=11')
boxplot(t(meaningfulness[,,1]), col='white')
boxplot(t(meaningfulness[,,1]), col='white', names=names)
print(t(meaningfulness))
print((meaningfulness))
data.frame(t(meaningfulness[,,2]))
data.frame(t(meaningfulness[,,2]), col.names=names)
data.frame(t(meaningfulness[,,2]), row.names=names)
data.frame(t(meaningfulness[,,2]))
data.frame(t(meaningfulness[,,2]), colnames(names))
data.frame((meaningfulness[,,2]), colnames(names))
m <- data.frame(t(meaningfulness[,,2]))
View(m)
colnames(a) <-names
colnames(m) <-names
colnames(m) <-names
View(m)
View(m)
ggplot(m) +
geom_boxplot()
boxplot(t(meaningfulness[,,2]))
boxplot(t(meaningfulness[,,1]), col='white', names=names)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=1)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=3)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=4)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las04)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=0)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las10)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=1)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2)
par(las=1)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1), height=20)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1), height=30)
windows.options(width=10, height=10)
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1), col='red')
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1), col='r')
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1), col=c('red'))
boxplot(t(meaningfulness[,,2]), col='white', names=names, las=2, ylim=c(0,1))
print('Experiment settings:')
print('')
sprintf("n:                                           %d",n)
sprintf('r:                                           %d',r)
sprintf('Normalizer:                                  %s',norm_method)
sprintf('Distance metric:                             %s',dist_metric)
sprintf('Clustering algorithm:                        %s',cluster_algo)
sprintf('Reduced sampling size for whole clustering:  %s',reduced_sampling)
sprintf('PCA:                                         %s',dim_red)
sprintf('Unified hyperparameters:                     %s',unify)
#plot(1:length(target_ts),target_ts, type = 'l')
#title("Target time series")
#plot(1:length(opposing_ts),opposing_ts,type = 'l')
#title("Opposing time series")
#print("")
#print("Results:")
#l_ks <- length(ks)
#l_ws <- length(ws)
#meaningfulness_table <- matrix(0, nrow = (l_ks*l_ws), ncol = 4)
#meaningfulness_plot <- matrix(0, nrow=length(ws), ncol = (length(ks)*2))
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 20
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- FALSE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,2]), col='white', names=names, las=2, ylim=c(0,1))
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- FALSE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,2]), col='white', names=names, las=2, ylim=c(0,1))
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 5
# size of cluster set to be calculated for within/between set cluster distance.
r <- 10
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- FALSE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,2]), col='white', names=names, las=2, ylim=c(0,1))
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 5
# size of cluster set to be calculated for within/between set cluster distance.
r <- 10
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,2]), col='white', names=names, las=2, ylim=c(0,1))
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[1]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,2]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,2]), col='white', names=names, las=2, ylim=c(0,1))
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
boxplot(t(meaningfulness[,,1]), col='white', names=names, las=2, ylim=c(0,1))
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[3]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
# number of iterations of meaningfulness calculation to average over.
n <- 10
# size of cluster set to be calculated for within/between set cluster distance.
r <- 3
ks <- c(3,5,7,11)
ws <- c(8,16,32)
norm_methods <- c("none","center", "scale", "range");
dist_metrics <- c("eukl")
cluster_algos <- c("kmeans","agglo","gmm")
##### unification #####
unify <- TRUE
##### clustering algorithm #####
cluster_algo <- cluster_algos[3]
############ unchanged hyperparameters ############
dist_metric <- dist_metrics[1]
seed_ <- 0
dim_red <- TRUE
norm_method <- norm_methods[3]
# reduces de sampling size of the random sampled subsequences that are used for whole clustering
# if false the random samples matrix has the same height as the sts matrix
reduced_sampling <- TRUE
###################################################
##### time series #####
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
target_ts <- spx
opposing_ts <- create_random_walk(target_ts,seed_)
source("random_walk.R")
source("meaningfulness_calculations.R")
## [spx, min_daily_temp, dax_alltime, bitcoin_alltime, hydraulic, quality]
meaningfulness <- array(0,c(12,5,2))
m_i <- 1
for (w in 1:length(ws)) {
for (k in 1:length(ks)) {
meaningfulness[m_i, 1,1:2] <- calculate_meaningfulness(spx,create_random_walk(spx,seed_),n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 2, 1:2] <- calculate_meaningfulness(min_daily_temp, create_random_walk(min_daily_temp, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 3, 1:2] <- calculate_meaningfulness(dax_alltime, create_random_walk(dax_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 4, 1:2] <- calculate_meaningfulness(bitcoin_alltime, create_random_walk(bitcoin_alltime, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
meaningfulness[m_i, 5, 1:2] <- calculate_meaningfulness(hydraulic, create_random_walk(hydraulic, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
#meaningfulness[m_i, 6, 1:2] <- calculate_meaningfulness(air_quality, create_random_walk(air_quality, seed_), n,ks[k],ws[w],r,dist_metric,norm_method,cluster_algo,reduced_sampling,dim_red,unify,seed_)
m_i <- m_i + 1
}
}
